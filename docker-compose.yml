version: '3.8'

services:
  # Frontend Development Server
  frontend:
    build:
      context: .
      target: frontend-builder
    ports:
      - "8080:8080"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
    environment:
      - NODE_ENV=development
    command: npm run dev
    
  # Backend API Server
  backend:
    build:
      context: .
      target: runtime
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - PORT=8000
      - DATABASE_URL=postgresql://tribridge:password@postgres:5432/tribridge
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-here
      - SUMSUB_APP_TOKEN=your-sumsub-token
      - ONFIDO_API_TOKEN=your-onfido-token
    depends_on:
      - postgres
      - redis
    volumes:
      - ./backend/logs:/app/logs
      
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=tribridge
      - POSTGRES_USER=tribridge
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
      
  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      
  # Nginx Reverse Proxy (for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data: